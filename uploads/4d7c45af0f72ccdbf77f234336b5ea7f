// import { fetch } from 'node-fetch';
import React, { useEffect, useState } from 'react';
import { FiEdit } from 'react-icons/fi';
import { RiDeleteBin6Line } from 'react-icons/ri';
import { Link } from 'react-router-dom';
import { getAccessToken } from '../../Login/Auths';
import Table from '../../Shared/Table/Table';
const Categories = (props) => {
    const [isLoading, setIsLoading] = useState(false);
    const [categoriesData, setCategoriesData] = useState();
    const [searchedData, setSearchedData] = useState();
    const [msg, setMsg] = useState();
    const [pagination, setPagination] = useState({
        limit: 100,
        offset: 0,
        total: 0
    });
    const token = getAccessToken();
    useEffect(() => {
        document.title = 'Dashboard - View Item Categories';
    });

    const getCategories = async () => {
        setIsLoading(true);
        try {
            const response = await fetch(
                `https://cashback-softcent.herokuapp.com/admin/v1/item_category?limit=200&offset=0`,
                {
                    method: 'GET',
                    headers: {
                        'Content-Type': 'application/json',
                        Authorization: 'Bearer ' + token
                    }
                }
            );
            const responseData = await response.json();
            if (response.ok) {
                setCategoriesData(responseData.data.data.rows);
                setMsg('Success');
            } else {
                setMsg(responseData.message);
                console.log('Failed');
            }
        } catch (err) {
            setMsg('Failed: ' + err.message);
            console.log(err);
        }
        setIsLoading(false);
    };
    useEffect(() => {
        if (token) {
            getCategories();
        }
    }, []);
    useEffect(() => {
        setSearchedData(categoriesData);
    }, [categoriesData]);

    useEffect(() => {
        if (categoriesData && props.searchKey) {
            setSearchedData(
                categoriesData.filter((data) =>
                    data.name.toLowerCase().includes(props.searchKey.toLowerCase())
                )
            );
        } else setSearchedData(categoriesData);
    }, [props.searchKey]);
    const deleteCategory = async (id) => {
        setIsLoading(true);
        try {
            const response = await fetch(
                `https://cashback-softcent.herokuapp.com/admin/v1/item_category/${id}`,
                {
                    method: 'DELETE',
                    headers: {
                        'Content-Type': 'application/json',
                        Authorization: 'Bearer ' + token
                    }
                }
            );
            const responseData = await response.json();

            if (response.ok) {
                setMsg(responseData.message);
                setCategoriesData(categoriesData.filter((data) => data.id !== id));
            } else {
                setMsg(responseData.message);
            }
        } catch (err) {
            setMsg('Failed: ' + err.message);
        }
        setIsLoading(false);
    };

    let fields;
    if (searchedData) {
        fields = searchedData.map((data) => (
            <tr key={data.id}>
                <td>{data.name}</td>
                <td>{data.active ? 'true' : 'false'}</td>
                <td>{data.requested_counter}</td>
                <td>{new Date(data.createdAt).toLocaleDateString()}</td>
                <td>
                    <div className="action-btn">
                        <Link className="edit-icon" to={`/edit/category/${data.id}`} state={data}>
                            <FiEdit />
                        </Link>

                        <button className="delete-icon" onClick={() => deleteCategory(data.id)}>
                            <RiDeleteBin6Line />
                        </button>
                    </div>
                </td>
            </tr>
        ));
    }
    const columns = ['Name', 'isActive', 'Requested Counter', 'Created At'];

    return (
        <>
            <Table isLoading={isLoading} msg={msg} fields={fields} columns={columns} />
        </>
    );
};

export default Categories;
